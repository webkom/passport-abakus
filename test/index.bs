import should
import chai
import nock
import chai-passport-strategy as chaiPassportStrategy

import ../index as abakusStrategy

chai.use(chaiPassportStrategy)
expect = chai.expect

createApiMock = (response, status) ->
    scope = nock('https://abakus.no')
                .post('/api/test/user/check/')
                .reply(status or 200, response)
    return scope

describe('passport-abakus', () ->
    describe('abakusStrategy', () ->
        it('should throw error if ABAKUS_TOKEN is not in environment variables', () ->
            delete process.env.ABAKUS_TOKEN
            expect(abakusStrategy).to.throw(Error)
            process.env.ABAKUS_TOKEN = 'test'
        )
        it('should fail when api has a bad response', (done) ->
            createApiMock({ error: '' }, 400)

            chai.passport.use(abakusStrategy())
                .fail((info) ->
                    expect(info.message).to.equal('Error in API response')
                    done()
                ).req((req) ->
                  req.query = {
                      username: 'test'
                      password: 'test'
                  }
                ).authenticate()
        )

        it('should fail when api rejects the credentials', (done) ->
            createApiMock({ user: { auth: false } })

            chai.passport.use(abakusStrategy())
                .fail((info) ->
                    expect(info.message).to.equal('Bad credentials')
                    done()
                ).req((req) ->
                  req.query = {
                      username: 'test'
                      password: 'test'
                  }
                ).authenticate()
        )

        it('success when api accepts the credentials', (done) ->
            createApiMock({ user: {
                username: 'test',
                committes: ['Webkom']
                is_abakom: true
                auth: true
            }})

            chai.passport.use(abakusStrategy())
                .success((user, info) ->
                    expect(user.username).to.equal('test')
                    expect(user.auth).to.be.true
                    done()
                ).req((req) ->
                  req.query = {
                      username: 'test'
                      password: 'test'
                  }
                ).authenticate()
        )

        describe('requireCommittee option', () ->
            it('fail when an user is not in a provided committee', (done) ->
                createApiMock({ user: {
                    username: 'test',
                    committees: ['Webkom'],
                    is_abakom: true,
                    auth: true
                }})

                chai.passport.use(abakusStrategy({ requireCommittee: 'LaBamba' }))
                    .fail((info) ->
                        expect(info.message).to.equal('Not in LaBamba')
                        done()
                    ).req((req) ->
                        req.query = {
                            username: 'test',
                            password: 'test'
                        }
                    ).authenticate()
            )

            it('success when user is a member of a provided committee', (done) ->
                createApiMock({ user: {
                    username: 'test',
                    committees: ['Webkom'],
                    is_abakom: true,
                    auth: true
                }})

                chai.passport.use(abakusStrategy({ requireCommittee: 'Webkom' }))
                    .success((user, info) ->
                        expect(user.username).to.equal('test')
                        expect(user.committees.indexOf('Webkom')).to.be.above(-1)
                        expect(user.is_abakom).to.be.true
                        expect(user.auth).to.be.true
                        done()
                    ).req((req) ->
                        req.query = {
                            username: 'test',
                            password: 'test'
                        }
                    ).authenticate()

            )
        )

        describe('requireAbakom option', () ->
            it('fail when user is not a member of abakom', (done) ->
                createApiMock({ user: {
                    username: 'test',
                    committes: []
                    is_abakom: false
                    auth: true
                }})

                chai.passport.use(abakusStrategy({ requireAbakom: true }))
                    .fail((info) ->
                        expect(info.message).to.equal('Not in abakom')
                        done()
                    ).req((req) ->
                      req.query = {
                          username: 'test'
                          password: 'test'
                      }
                    ).authenticate()
            )
            it('success when user is a member of abakom', (done) ->
                createApiMock({ user: {
                    username: 'test',
                    committes: ['Webkom']
                    is_abakom: true
                    auth: true
                }})

                chai.passport.use(abakusStrategy({ requireAbakom: true }))
                    .success((user, info) ->
                        expect(user.username).to.equal('test')
                        expect(user.is_abakom).to.be.true
                        expect(user.auth).to.be.true
                        done()
                    ).req((req) ->
                      req.query = {
                          username: 'test'
                          password: 'test'
                      }
                    ).authenticate()
            )
        )
    )
)
